Welcome to linux hands on

&& after one command execution other command will 

by using curl we can see that total scripr
curl: check url
curl https://get.docker.com | bash && docker version

here what ever output we get from first paramter it will passthat output another parameter.
cat /etc/passwd | cut -d ":" -f 1
cat it will read the data and that data out put passto next param cut delimited by : we are getting the first filed

Variable declaration:
types of variable declaration
a=20
echo $a
echo "$a"
echo "${a}"

here single quote for string
operators:
#!/bin/bash
function testing () {
read -p "Enter the first number:" NUM1
read -p "Enter the second number:" NUM2
NEWNUM=$(($NUM1+$NUM2))
#echo "The New Number is $NEWNUM""
return ${NEWNUM}
}

first script
#! /bin/bash
echo "first script"
i=$@
while [ $i -lt 6]
do
echo " i am $i"
sleep 2
i=$(( $i + 1 ))
done


chmod +x test.sh
./test.sh 100
hete $@ is used for taking the user values as a input
===================
****By using scripting we need to create a file in every 5 secondss3 bucket in aws

for this we need aws cli
apt-get install unzip paste the below command

$ curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

aws --version
aws-cli/2.0.56 Python/3.7.3 Linux/4.4.0-1113-aws exe/x86_64.ubuntu.16
aws configure
aws s3 ls
NOw we need to configure our aws

buk=$(aws s3 ls | cut -d " " -f 3)
#code
#! /bin/bash
i=0
while [ $i -lt 3]
do
date > file$i s3://bucketname
echo "uploading file$i"
sleep 2
i=$(( $i + 1 ))
done

====================================================
another realtime
need to check user exist or not && if user not exist create it && set random password at first login
to check users /etc/passwd

read is used to enter command side input values
to delete a user userdel -r username
--now we need to learn operators
learn this
https://www.tutorialspoint.com/unix/unix-basic-operators.htm
-z is check userinput is empty or not(note it only for strings)
***** linux very important params to know
$?
$@
$*
$#

$? is used for previously executed command succees or not if it sucees it will return 0 
echo $?

========== create a user and random password scripting code========================
#!/bin/bash
while [ TRUE ]; do
​read -p "Enter Username 1:" USER1
​if [ -z $USER1 ]; then
   ​echo "Please Enter A Valid Username."
​else
   ​EXUSER=$(cat /etc/passwd | cut -d ":" -f 1 | grep -w "$USER1")
   ​echo $EXUSER
   ​if [[ "$EXUSER" == "$USER1" ]]; then
       ​echo "User Exists, please enter a unique username"
   ​else
       ​useradd -m $USER1
       ​ALPHA='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
       ​ALPHACHAR=$(echo $ALPHA | fold -w 4 | shuf | head -1)
       ​SPEC='!@#$%^&*()_'
       ​SPECCHAR=$(echo $SPEC | fold -w1 | shuf | head -1)
       ​PASSWORD=India${ALPHACHAR}${SPECCHAR}$RANDOM
       ​chown $USER1:$USER1 /home/$USER1
       ​echo "$USER1:$PASSWORD" | sudo chpasswd
       ​echo "User $USER1 and password is $PASSWORD sucessfully created..!!"
       ​passwd -e $USER1
   ​fi
​fi
done
=============================
grep => gradual regular expressions
grep -i where ever it match it will display
grep -w it matches the word
grep -n -w it matches the word along with line number

awk we used for data manupulating (without using grep and cut -d ":" -f 1,2,3)
ex: cat /etc/passwd | awk -F ':' '{print $1,$2,$3}'

**** sed
By using sed we can replace the data ontime
echo "https://releases.hashicorp.com/terraform/0.12.28/terraform_0.12.28_linux_amd64.zip" | sed 's/0.12.28/'"$ver"'/g'
refurl: https://www.geeksforgeeks.org/sed-command-in-linux-unix-with-examples/

** tr is used for converting lowercase to uppercase and remove the spaces
*** sort is a command is used to arrange a file in alphabetical order
refurl : https://www.geeksforgeeks.org/sort-command-linuxunix-examples/
=============================================================
***multi if condition
IF Statement - Multiple Conditions:
 
echo -e "1.Morning\n2.Afternoon\n3.Evening\n4.Night"
echo -n "Please select from above:"
read n
if [[ $n -eq 1 ]]
then
echo "Good Morning"
elif [[ $n -eq 2 ]]
then
echo "Good Afternoon"
elif [[ $n -eq 3 ]]
then
echo "Good Evening"
elif [[ $n -eq 4 ]]
then
echo "Good Night"
Fi
=================================== 
parameters input
$?
$#
$*
$@

arrays
exports
for & while loops

params examples:
./script.sh  1 2 3 
now user enter 3 parameters how we can count that parameters
ex:
#! /bin/bash
echo "to find how many params we can use $#"
if [ $# -gt 3 ]
then
echo "please enter below 3 params only"
else 
echo "u have enetered $#"
echo $1
echo $2
echo $3
echo $4
fi
==================
$? ==> privious ouput return success or not

$* and $@ both are same

this will work on user how many inputs they fill it takes only that inputs
ex:
#! /bin/bash
echo $@
bash test.sh vm1 vm2
bash test.sh vm1 vm2 vm3

=======================
for loop ref
refurl: https://www.tutorialspoint.com/unix/for-loop.htm
above $@ same senario in loop

echo $@
for vm in $@
do
echo "shutting vm $vm"
done

=============real time create volumes=================
Creating volumes
 
#!/bin/bash
echo $*
for VOL in $*
do
echo "Creating The Volume...."
aws ec2 create-volume --volume-type gp2 --size $VOL --availability-zone us-east-1a --tag-specifications 'ResourceType=volume,Tags=[{Key=Name,Value=PRODVOL}]'
done

to run script
./test.sh 1 2 3 4(no 1 & 2 & 3 & 4 gb volumes are created
================================
params example code
=========================
#!/bin/bash
for x in $*
do
echo $x
done
echo "==================="
for x in $@
do
echo $x
done
echo "==================="
echo '"$*"'
for x in "$*"
do
echo $x
done
echo "==================="
for x in "$@"
do
echo $x
done
echo "==================="
=====================================



